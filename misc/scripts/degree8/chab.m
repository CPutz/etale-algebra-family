SetEchoInput(true);

QQ := Rationals();
R<X> := PolynomialRing(QQ);
K<a> := NumberField(X^4 - 2*X^3 - 2*X^2 - 4*X - 10);
phi := 4*X^5*(25*X^3 + 20*X^2 + 14*X + 14);

R<s,t,u,v> := PolynomialRing(QQ,4);
P<x,y,z> := ProjectiveSpace(QQ,2);

f := ((4*s-1)*Evaluate(phi,t) - (4*t-1)*Evaluate(phi, s)) div (s - t);
D := Curve(P, Homogenization(Evaluate(f, [x,y,0,0]), z));
I := ideal< R | [f, s + t - u, s*t - v] >;
g := Homogenization(Evaluate(Basis(EliminationIdeal(I,{u,v}))[1], [0,0,x,y]), z);
C := Curve(P, g);
DtoC := map < D -> C | [(x + y)*z, x*y, z^2] >;

//map from C to P^1
h_st := ((4*s-1)*Evaluate(phi,t) + (4*t-1)*Evaluate(phi, s)) / 2;
Ih := ideal< R | [h_st, s + t - u, s*t - v] >;
h_uv := Homogenization(Evaluate(Basis(EliminationIdeal(Ih,{u,v}))[1], [0,0,x,y]), z);
P1 := ProjectiveSpace(QQ,1);
covC := map< C -> P1 | [CoordinateRing(C)!h_uv, CoordinateRing(C)!z^8] >;

E0,CtoE0 := EllipticCurve(C, C![4,1,0]);
_,E0toC := IsInvertible(CtoE0);
covE0 := E0toC * covC;

E1 := EllipticCurve(X^3 - 154*X^2 + 6125*X);
_,E1toE0 := IsIsomorphic(E1,E0);
covE1 := E1toE0 * covE0;

E := EllipticCurve(X^3 - 7*X^2 - 49*X);
EtoE1 := map< E -> E1 |
	[x^9 + 49*x^8*z + 196*x^7*z^2 - 12691*x^6*z^3 - 
        24010*x^5*z^4 + 621859*x^4*z^5 + 470596*x^3*z^6 - 
        5764801*x^2*z^7 + 5764801*x*z^8,
    x^8*y - 490*x^6*y*z^2 + 10976*x^5*y*z^3 + 
        537824*x^3*y*z^5 + 1176490*x^2*y*z^6 - 5764801*y*z^8,
    x^8*z - 147*x^6*z^3 + 7203*x^4*z^5 - 117649*x^2*z^7] >;
covE := EtoE1 * covE1;

EK := BaseChange(E1,K);
saturated_at_2,A,AtoEK := PseudoMordellWeilGroup(EK);
//the subgroup generated by gens is saturated at 2
assert saturated_at_2;

eqs := DefiningEquations(covE1);
g1 := GCD(eqs);
eqs2 := [e div g1 : e in eqs];

T<x,y,z> := CoordinateRing(E1);
S<X,Y,Z> := OriginalRing(T);

eqs_red := [Evaluate(Evaluate(e, [x, y, z]), [X, Y, Z]) : e in eqs2];
g2 := GCD(eqs_red);
eqs_red := [e div g2 : e in eqs_red];

//assert that the reduced equations are equivalent to the original equations
assert IsDivisibleBy(eqs_red[1]*eqs[2] - eqs_red[2]*eqs[1], DefiningEquation(E1));
cov := map< EK -> P1 | eqs_red >;

time N,V,R,Co := Chabauty(AtoEK, cov, 3 : Aux := {11});
assert N eq #V;
assert #Co[2] eq 0;
assert PrimeDivisors(R) subset {2};

//points with rational image
[Inverse(CtoE0)(E1toE0(AtoEK(v))) : v in V];