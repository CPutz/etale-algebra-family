
intrinsic SylvesterHabichtMatrix(F::RngUPolElt, G::RngUPolElt, j::RngIntElt) -> AlgMatElt
{The j-th Sylvester-Habicht matrix of F and G}
  S := SylvesterMatrix(F,G);
  p := Degree(F);
  q := Degree(G);
  S1 := Matrix(S[1..(q-j)]);
  S2 := Matrix(Reverse(S[(q+1)..(q+p-j)]));
  M := VerticalJoin(S1, S2);
  for i := p+q to p+q-j+1 by -1 do
    RemoveColumn(~M, Ncols(M));
  end for;
  return M;
end intrinsic;

intrinsic Subresultant(F::RngUPolElt, G::RngUPolElt, j::RngIntElt) -> RngElt
{The j-th signed subresultant coefficient of F and G}
    p := Degree(F);
    q := Degree(G);
    M := SylvesterHabichtMatrix(F,G,j);
    for i := p+q to p+q-j+1 by -1 do
        RemoveColumn(~M, Ncols(M));
    end for;
    return Determinant(M);
end intrinsic;

intrinsic Subdiscriminant(F::RngUPolElt, j::RngIntElt) -> RngElt
{The j-th subdiscriminant of F}
    return Subresultant(F, Derivative(F), j) / LeadingCoefficient(F);
end intrinsic;

intrinsic SubresultantsIdeal(F::RngUPolElt, G::RngUPolElt, j::RngIntElt) -> RngMPol
{The ideal generated by the 0-th, 1-th, ..., j-th subresults of F and G}
    R := BaseRing(F);
    return ideal<R | [Subresultant(F,G,i) : i in [0..j]]>;
end intrinsic;

intrinsic SubdiscriminantsIdeal(F::RngUPolElt, j::RngIntElt) -> RngMPol
{The ideal generated by the 0-th, 1-th, ..., j-th subresultant of F}
    R := BaseRing(F);
    return ideal<R | [Subdiscriminant(F,i) : i in [0..j]]>;
end intrinsic;

intrinsic PseudoRemainderSequence(F::RngUPolElt, G::RngUPolElt) -> SeqEnum
{The pseudo remainder sequence of F and G}
    L := [];
    S1 := F;
    S2 := G;
    repeat
        Degree(S2);
        if S1 eq F then
            R := 1;
        else
            R := LeadingCoefficient(S1);
        end if;
        time S3 := PseudoRemainder(S1,S2) div R^2;
        S1 := S2;
        S2 := S3;
        Append(~L, S3);
    until Degree(S2) le 0;
    return L;
end intrinsic;